/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.livraria.view;

import com.livraria.constantes.Constantes;
import com.livraria.controller.BancoController;
import com.livraria.controller.HistoricosDestinoController;
import com.livraria.controller.HistoricosOrigemController;
import com.livraria.controller.TitulosDestinoController;
import com.livraria.controller.TitulosOrigemController;
import com.livraria.controller.UsuariosDestinoController;
import com.livraria.controller.UsuariosOrigemController;
import com.livraria.model.dao.DAOException;
import com.livraria.model.entidade.Contador;
import com.livraria.model.entidade.Historico;
import com.livraria.model.entidade.Titulo;
import com.livraria.model.entidade.Usuario_Bib;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author John
 */
public class FrmPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FrmPrincipal
     */
    public FrmPrincipal() {
        initComponents();
        bancoController = new BancoController();
        uoController = new UsuariosOrigemController();
        udController = new UsuariosDestinoController();
        toController = new TitulosOrigemController();
        tdController = new TitulosDestinoController();
        hoController = new HistoricosOrigemController();
        hdController = new HistoricosDestinoController();
        contador = new Contador();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnIniciar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblRATitulos = new javax.swing.JLabel();
        lblRITitulos = new javax.swing.JLabel();
        pbTitulos = new javax.swing.JProgressBar();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblRAUsuarios = new javax.swing.JLabel();
        lblRIUsuarios = new javax.swing.JLabel();
        pbUsuarios = new javax.swing.JProgressBar();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblRAHistorico = new javax.swing.JLabel();
        lblRIHistorico = new javax.swing.JLabel();
        pbHistorico = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ETL Biblioteca");

        btnIniciar.setText("Iniciar Carga/Incremento/Atualização");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dimensão Títulos:"));

        jLabel1.setText("Registros Incluídos:");

        jLabel2.setText("Registros Atualizados:");

        lblRATitulos.setText("0");

        lblRITitulos.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblRITitulos))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblRATitulos)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(pbTitulos, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblRITitulos))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblRATitulos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pbTitulos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Dimensão Usuarios:"));

        jLabel5.setText("Registros Incluídos:");

        jLabel6.setText("Registros Atualizados:");

        lblRAUsuarios.setText("0");

        lblRIUsuarios.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pbUsuarios, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblRIUsuarios))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblRAUsuarios)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lblRIUsuarios))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lblRAUsuarios))
                .addGap(18, 18, 18)
                .addComponent(pbUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Fato Histórico:"));

        jLabel3.setText("Registros Incluídos:");

        jLabel4.setText("Registros Atualizados:");

        lblRAHistorico.setText("0");

        lblRIHistorico.setText("0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblRIHistorico))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblRAHistorico)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(pbHistorico, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblRIHistorico))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblRAHistorico))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pbHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnIniciar)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnIniciar)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(78, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        try {
            //SET GLOBAL max_connections = 6000;
            //SHOW STATUS WHERE `variable_name` = 'Threads_connected';
            //Cria banco e tabelas
            bancoController.criarBanco(Constantes.BANCO);
            bancoController.criarTabela(Constantes.TABELA_DIMENSAO_TITULOS);
            bancoController.criarTabela(Constantes.TABELA_DIMENSAO_USUARIOS);
            bancoController.criarTabela(Constantes.TABELA_FATO_HISTORICO);

            if(!bancoController.verificarIndex(Constantes.NOME_INDEX_TITULOS, Constantes.NOME_TABELA_TITULOS)){
                bancoController.criarTabela(Constantes.INDICE_DIMENSAO_TITULOS);
            }

            if(!bancoController.verificarIndex(Constantes.NOME_INDEX_USUARIOS, Constantes.NOME_TABELA_USUARIOS)){
                bancoController.criarTabela(Constantes.INDICE_DIMENSAO_USUARIOS);
            }
            
            if(!bancoController.verificarIndex(Constantes.NOME_INDEX_HISTORICOS, Constantes.NOME_TABELA_HISTORICOS)){
                bancoController.criarTabela(Constantes.INDICE_FATO_HISTORICOS);
            }

            //Procura e Insere novos Registros Dimensao Usuarios
            inserirNovosRegistrosUsuarios();

            //Procura e Atualiza registos existentes Dimens~ao Usuarios
            atualizarRegistrosExistentesUsuarios();

            //Procura e Insere novos Registros Dimensao Titulos
            inserirNovosRegistrosTitulos();

            //Procura e Atualiza registos existentes Dimens~ao Titulos
            atualizarRegistrosExistentesTitulos();

            //Procura e Insere novos Registros Fato Historico
            inserirNovosRegistrosHistoricos();

            //Procura e Atualiza registos existentes Fato Historico
            atualizarRegistrosExistentesHistoricos();
        } catch (DAOException | SQLException | InterruptedException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnIniciarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPrincipal().setVisible(true);
            }
        });
    }
    private BancoController bancoController;
    private UsuariosOrigemController uoController;
    private UsuariosDestinoController udController;
    private TitulosOrigemController toController;
    private TitulosDestinoController tdController;
    private HistoricosOrigemController hoController;
    private HistoricosDestinoController hdController;
    private Contador contador;
    private Thread tIncluiUsuarios, tMonitoraInclusaoUsuarios, tAlteraUsuarios,
            tMonitoraAlteracaoUsuarios,
            tIncluiTitulos, tMonitoraInclusaoTitulos, tAlteraTitulos,
            tMonitoraAlteracaoTitulos,
            tIncluiHistoricos, tMonitoraInclusaoHistoricos, tAlteraHistoricos,
            tMonitoraAlteracaoHistoricos;
    private ArrayList<Usuario_Bib> ub;
    private ArrayList<Titulo> t;
    private ArrayList<Historico> h;
    private Integer totalUsuarios;
    private Integer totalTitulos;
    private Integer totalHistorico;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIniciar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblRAHistorico;
    private javax.swing.JLabel lblRATitulos;
    private javax.swing.JLabel lblRAUsuarios;
    private javax.swing.JLabel lblRIHistorico;
    private javax.swing.JLabel lblRITitulos;
    private javax.swing.JLabel lblRIUsuarios;
    private javax.swing.JProgressBar pbHistorico;
    private javax.swing.JProgressBar pbTitulos;
    private javax.swing.JProgressBar pbUsuarios;
    // End of variables declaration//GEN-END:variables

    private void inserirNovosRegistrosUsuarios() throws DAOException, SQLException, InterruptedException {

        pbUsuarios.setIndeterminate(true);
        btnIniciar.setEnabled(false);
        pbUsuarios.setValue(0);
        contador.setContador(0);

        tIncluiUsuarios = new Thread() {
            boolean pausa = false;

            @Override
            public void run() {
                rIncluiUsuarios.run();
            }
        };
        tIncluiUsuarios.start();

        tMonitoraInclusaoUsuarios = new Thread() {
            @Override
            public void run() {
                rMonitoraInclusaoUsuarios.run();
            }
        };
    }

    private void atualizarRegistrosExistentesUsuarios() throws DAOException {
        tAlteraUsuarios = new Thread() {
            @Override
            public void run() {
                rAlteraUsuarios.run();
            }
        };
        tAlteraUsuarios.start();

        tMonitoraAlteracaoUsuarios = new Thread() {
            @Override
            public void run() {
                rMonitoraAlteracaoUsuarios.run();
            }
        };
    }
    private Runnable rIncluiUsuarios = new Runnable() {
        public void run() {
            try {
                tMonitoraInclusaoUsuarios.start();

                totalUsuarios = uoController.totalUsuarios(false);
                for (int i = 0; i < totalUsuarios; i = i + 10000) {
                    ub = uoController.selecionaTudo(0, 10000, false);

                    lblRIUsuarios.setText(String.valueOf(udController.inserirNovosRegistros(ub, contador)));
                }

            } catch (DAOException | SQLException e) {
            }
        }
    };
    private Runnable rMonitoraInclusaoUsuarios = new Runnable() {
        public void run() {
            try {
                while (tIncluiUsuarios.isAlive()) {
                    lblRIUsuarios.setText(String.valueOf(contador.getContador()));
                    Thread.sleep(1000);
//                    System.out.println("atualizou inclusao ...");
                }
//                JOptionPane.showMessageDialog(null, "Terminou...");
            } catch (Exception e) {
            }
        }
    };
    private Runnable rAlteraUsuarios = new Runnable() {
        public void run() {
            try {
                while (tIncluiUsuarios.isAlive()) {
                    Thread.sleep(1000);
                }
                contador.setContador(0);
                tMonitoraAlteracaoUsuarios.start();

                totalUsuarios = uoController.totalUsuarios(true);
                for (int i = 0; i < totalUsuarios; i = i + 10000) {
                    ub = uoController.selecionaTudo(i, 10000, true);

                    lblRAUsuarios.setText(String.valueOf(udController.atualizarRegistrosExistentesUsuarios(ub, contador)));
                }

                pbUsuarios.setIndeterminate(false);
                pbUsuarios.setValue(100);
//                btnIniciar.setEnabled(true);
            } catch (Exception e) {
            }
        }
    };
    private Runnable rMonitoraAlteracaoUsuarios = new Runnable() {
        public void run() {
            try {
                while (tAlteraUsuarios.isAlive()) {
                    lblRAUsuarios.setText(String.valueOf(contador.getContador()));
                    Thread.sleep(1000);
//                    System.out.println("atualizou alteracao ...");
                }
//                JOptionPane.showMessageDialog(null, "Terminou...");
            } catch (Exception e) {
            }
        }
    };

    private void inserirNovosRegistrosTitulos() throws DAOException, SQLException, InterruptedException {
        tIncluiTitulos = new Thread() {
            boolean pausa = false;

            @Override
            public void run() {
                rIncluiTitulos.run();
            }
        };
        tIncluiTitulos.start();

        tMonitoraInclusaoTitulos = new Thread() {
            @Override
            public void run() {
                rMonitoraInclusaoTitulos.run();
            }
        };
    }

    private void atualizarRegistrosExistentesTitulos() throws DAOException {
        tAlteraTitulos = new Thread() {
            @Override
            public void run() {
                rAlteraTitulos.run();
            }
        };
        tAlteraTitulos.start();

        tMonitoraAlteracaoTitulos = new Thread() {
            @Override
            public void run() {
                rMonitoraAlteracaoTitulos.run();
            }
        };
    }
    private Runnable rIncluiTitulos = new Runnable() {
        public void run() {
            try {
                while (tAlteraUsuarios.isAlive()) {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                pbTitulos.setIndeterminate(true);
                pbTitulos.setValue(0);
                contador.setContador(0);

                tMonitoraInclusaoTitulos.start();

                totalTitulos = toController.totalTitulos(false);
                System.out.println("Total Titulos:"+totalTitulos);
                for (int i = 0; i < totalTitulos; i = i + 10000) {
                    t = toController.selecionaTudo(0, 10000, false);

                    lblRITitulos.setText(String.valueOf(tdController.inserirNovosRegistros(t, contador)));
                }
            } catch (DAOException | SQLException e) {
            }
        }
    };
    private Runnable rMonitoraInclusaoTitulos = new Runnable() {
        public void run() {
            try {
                while (tIncluiTitulos.isAlive()) {
                    lblRITitulos.setText(String.valueOf(contador.getContador()));
                    Thread.sleep(1000);
//                    System.out.println("atualizou inclusao ...");
                }
//                JOptionPane.showMessageDialog(null, "Terminou...");
            } catch (Exception e) {
            }
        }
    };
    private Runnable rAlteraTitulos = new Runnable() {
        public void run() {
            try {
                while (tIncluiTitulos.isAlive()) {
                    Thread.sleep(1000);
                }
                contador.setContador(0);
                tMonitoraAlteracaoTitulos.start();

                totalTitulos = toController.totalTitulos(true);
                for (int i = 0; i < totalTitulos; i = i + 10000) {
                    t = toController.selecionaTudo(i, 10000, true);

                    lblRATitulos.setText(String.valueOf(tdController.atualizarRegistrosExistentesTitulos(t, contador)));
                }

                pbTitulos.setIndeterminate(false);
                pbTitulos.setValue(100);
            } catch (Exception e) {
            }
        }
    };
    private Runnable rMonitoraAlteracaoTitulos = new Runnable() {
        public void run() {
            try {
                while (tAlteraTitulos.isAlive()) {
                    lblRATitulos.setText(String.valueOf(contador.getContador()));
                    Thread.sleep(1000);
//                    System.out.println("atualizou alteracao ...");
                }
//                JOptionPane.showMessageDialog(null, "Terminou...");
            } catch (Exception e) {
            }
        }
    };

    private void inserirNovosRegistrosHistoricos() throws DAOException, SQLException, InterruptedException {
        tIncluiHistoricos = new Thread() {
            boolean pausa = false;

            @Override
            public void run() {
                rIncluiHistoricos.run();
            }
        };
        tIncluiHistoricos.start();

        tMonitoraInclusaoHistoricos = new Thread() {
            @Override
            public void run() {
                rMonitoraInclusaoHistoricos.run();
            }
        };
    }

    private void atualizarRegistrosExistentesHistoricos() throws DAOException {
        tAlteraHistoricos = new Thread() {
            @Override
            public void run() {
                rAlteraHistoricos.run();
            }
        };
        tAlteraHistoricos.start();

        tMonitoraAlteracaoHistoricos = new Thread() {
            @Override
            public void run() {
                rMonitoraAlteracaoHistoricos.run();
            }
        };
    }
    private Runnable rIncluiHistoricos = new Runnable() {
        public void run() {
            try {
                while (tAlteraTitulos.isAlive()) {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                pbHistorico.setIndeterminate(true);
                pbHistorico.setValue(0);
                contador.setContador(0);

                tMonitoraInclusaoHistoricos.start();

                //Insere os usuario que estao no historico mas nao estao 
                //cadastrados como usuarios do sistema
                Integer totalUsuariosAnonimos = hoController.totalRegistrosUsuariosAnonimos();
                for (int i = 0; i < totalUsuariosAnonimos; i = i + 10000) {
                    h = hoController.selecionaUsuariosAnonimos(i, 10000);

                    //insere os usuarios anonimos
                    udController.inserirNovosUsuariosAnonimos(h);
                }

                //Insere os titulos que estao no historico mas nao estao
                //cadastrados como titulos no sistema
                Integer totalTitulosAnonimos = hoController.totalRegistrosTitulosAnonimos();
                for (int i = 0; i < totalTitulosAnonimos; i = i + 10000) {
                    h = hoController.selecionaTitulosAnonimos(i, 10000);

                    //insere os livros anonimos
                    tdController.inserirNovosTitulosAnonimos(h);
                }

//                Integer totalRegistrosNaoAnonimos = hoController.TotalRegistrosComUsuariosRegistrados();
//                Integer totalRegistrosAnonimos = hoController.totalRegistros()-totalRegistrosNaoAnonimos;
//                for (int i = 0; i < totalRegistrosAnonimos; i = i + 10000) {
                /**
                 * No historico tem mais de 400 mil registros feitos por
                 * usuarios que nao estao no cadastro de usuarios. Portanto,
                 * insere-se esses usuários como anonimos na tabela de usuarios
                 * antes de inserir os demais registros
                 */
//                    h = hoController.selecionaRegistrosAnonimos(0, 10000);
                //insere os usuarios anonimos
//                    udController.inserirNovosUsuariosAnonimos(h);
                //insere os livros anonimos
//                    tdController.inserirNovosTitulosAnonimos(h);
                //insere os registros de emprestimos feitos por anonimos primeiro
//                    hdController.inserirNovosRegistros(h, contador);
//                }
                //Insere todos os historicos com excecao dos historicos 
                //sem codigo de exemplar/titulo
                totalHistorico = hoController.totalRegistros(false);
                for (int i = 0; i < totalHistorico; i = i + 10000) {
                    h = hoController.selecionaTudo(0, 10000, false);
                    lblRIHistorico.setText(String.valueOf(hdController.inserirNovosRegistros(h, contador)));
                }
            } catch (DAOException | SQLException e) {
            }
        }
    };
    private Runnable rMonitoraInclusaoHistoricos = new Runnable() {
        public void run() {
            try {
                while (tIncluiHistoricos.isAlive()) {
                    lblRIHistorico.setText(String.valueOf(contador.getContador()));
                    Thread.sleep(1000);
//                    System.out.println("atualizou inclusao ...");
                }
//                JOptionPane.showMessageDialog(null, "Terminou...");
            } catch (Exception e) {
            }
        }
    };
    private Runnable rAlteraHistoricos = new Runnable() {
        public void run() {
            try {
                while (tIncluiHistoricos.isAlive()) {
                    Thread.sleep(1000);
                }
                contador.setContador(0);
                tMonitoraAlteracaoHistoricos.start();
                
                totalHistorico = hoController.totalRegistros(true);
                for (int i = 0; i < totalHistorico; i = i + 10000) {
                    h = hoController.selecionaTudo(i, 10000, true);
                    lblRAHistorico.setText(String.valueOf(hdController.atualizarRegistrosExistentesHistoricos(h, contador)));
                }

                pbHistorico.setIndeterminate(false);
                pbHistorico.setValue(100);
            } catch (Exception e) {
            }
        }
    };
    private Runnable rMonitoraAlteracaoHistoricos = new Runnable() {
        public void run() {
            try {
                while (tAlteraHistoricos.isAlive()) {
                    lblRAHistorico.setText(String.valueOf(contador.getContador()));
                    Thread.sleep(1000);
//                    System.out.println("atualizou alteracao ...");
                }

                JOptionPane.showMessageDialog(null, "UFA Terminou...");                
            } catch (Exception e) {
            }
        }
    };
}
